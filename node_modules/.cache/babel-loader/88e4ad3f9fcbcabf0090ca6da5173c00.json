{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Herberton\\\\Documents\\\\alfood\\\\src\\\\paginas\\\\Administracao\\\\Restaurantes\\\\FormularioRestaurante.tsx\",\n    _s = $RefreshSig$();\n\nimport { AppBar, Box, Button, TextField, Typography } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport http from \"../../../http\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FormularioRestaurante = () => {\n  _s();\n\n  const parametros = useParams();\n  useEffect(() => {\n    if (parametros.id) {\n      http.get(`restaurantes/${parametros.id}/`).then(resposta => setNomeRestaurante(resposta.data.nome));\n    }\n  }, [parametros]);\n  const [nomeRestaurante, setNomeRestaurante] = useState('');\n\n  const aoSubmeterForm = evento => {\n    evento.preventDefault(); // não tenha comportamento de recarregar a pagina\n\n    if (parametros.id) {\n      http.put(`restaurantes/${parametros.id}/`, {\n        nome: nomeRestaurante\n      }).then(() => {\n        alert(\"Restaurante atualizado com sucesso!\");\n      });\n    } else {\n      http.post('restaurantes/', {\n        nome: nomeRestaurante\n      }).then(() => {\n        alert(\"Restaurante cadastrado com sucesso!\");\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h6\",\n        children: \" Formulario de restaurantes \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: aoSubmeterForm,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          value: nomeRestaurante,\n          onChange: evento => setNomeRestaurante(evento.target.value),\n          id: \"standard-basic\",\n          label: \"Nome do Restaurante\",\n          variant: \"standard\",\n          fullWidth: true,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          sx: {\n            marginTop: 1\n          },\n          type: \"submit\",\n          fullWidth: true,\n          variant: \"outlined\",\n          children: \"Salvar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FormularioRestaurante, \"XqHD56BXNSUaiw/O7Qr89DMmzfQ=\", false, function () {\n  return [useParams];\n});\n\n_c = FormularioRestaurante;\nexport default FormularioRestaurante;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormularioRestaurante\");","map":{"version":3,"sources":["C:/Users/Herberton/Documents/alfood/src/paginas/Administracao/Restaurantes/FormularioRestaurante.tsx"],"names":["AppBar","Box","Button","TextField","Typography","useEffect","useState","useParams","http","FormularioRestaurante","parametros","id","get","then","resposta","setNomeRestaurante","data","nome","nomeRestaurante","aoSubmeterForm","evento","preventDefault","put","alert","post","display","flexDirection","alignItems","target","value","marginTop"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,MAAtB,EAA8BC,SAA9B,EAAyCC,UAAzC,QAA2D,eAA3D;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,IAAP,MAAiB,eAAjB;;;;AAGA,MAAMC,qBAAqB,GAAG,MAAM;AAAA;;AAClC,QAAMC,UAAU,GAAGH,SAAS,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,UAAU,CAACC,EAAf,EAAmB;AACjBH,MAAAA,IAAI,CAACI,GAAL,CAAwB,gBAAeF,UAAU,CAACC,EAAG,GAArD,EACGE,IADH,CACQC,QAAQ,IAAIC,kBAAkB,CAACD,QAAQ,CAACE,IAAT,CAAcC,IAAf,CADtC;AAED;AACF,GALQ,EAKN,CAACP,UAAD,CALM,CAAT;AAOA,QAAM,CAACQ,eAAD,EAAkBH,kBAAlB,IAAwCT,QAAQ,CAAC,EAAD,CAAtD;;AAEA,QAAMa,cAAc,GAAIC,MAAD,IAA8C;AACnEA,IAAAA,MAAM,CAACC,cAAP,GADmE,CAC3C;;AAExB,QAAIX,UAAU,CAACC,EAAf,EAAmB;AACjBH,MAAAA,IAAI,CAACc,GAAL,CAAU,gBAAeZ,UAAU,CAACC,EAAG,GAAvC,EAA2C;AACzCM,QAAAA,IAAI,EAAEC;AADmC,OAA3C,EAGGL,IAHH,CAGQ,MAAM;AACVU,QAAAA,KAAK,CAAC,qCAAD,CAAL;AACD,OALH;AAMD,KAPD,MAOO;AACLf,MAAAA,IAAI,CAACgB,IAAL,CAAU,eAAV,EAA2B;AACzBP,QAAAA,IAAI,EAAEC;AADmB,OAA3B,EAGGL,IAHH,CAGQ,MAAM;AACVU,QAAAA,KAAK,CAAC,qCAAD,CAAL;AACD,OALH;AAMD;AAEF,GAnBD;;AAsBA,sBACE;AAAA,4BACA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADA,eAIE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAEE,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,aAAa,EAAE,QAAlC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OAAT;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,SAAS,EAAC,IAAtB;AAA2B,QAAA,OAAO,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,QAAA,QAAQ,EAAER,cAAhC;AAAA,gCACE,QAAC,SAAD;AACE,UAAA,KAAK,EAAED,eADT;AAEE,UAAA,QAAQ,EAAEE,MAAM,IAAIL,kBAAkB,CAACK,MAAM,CAACQ,MAAP,CAAcC,KAAf,CAFxC;AAGE,UAAA,EAAE,EAAC,gBAHL;AAIE,UAAA,KAAK,EAAC,qBAJR;AAKE,UAAA,OAAO,EAAC,UALV;AAME,UAAA,SAAS,MANX;AAOE,UAAA,QAAQ;AAPV;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE,QAAC,MAAD;AAAQ,UAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAAZ;AAA8B,UAAA,IAAI,EAAC,QAAnC;AAA4C,UAAA,SAAS,MAArD;AAAsD,UAAA,OAAO,EAAC,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAsBD,CAxDD;;GAAMrB,qB;UACeF,S;;;KADfE,qB;AA0DN,eAAeA,qBAAf","sourcesContent":["import { AppBar, Box, Button, TextField, Typography } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport http from \"../../../http\";\nimport IRestaurante from \"../../../interfaces/IRestaurante\";\n\nconst FormularioRestaurante = () => {\n  const parametros = useParams()\n\n  useEffect(() => {\n    if (parametros.id) {\n      http.get<IRestaurante>(`restaurantes/${parametros.id}/`)\n        .then(resposta => setNomeRestaurante(resposta.data.nome))\n    }\n  }, [parametros])\n\n  const [nomeRestaurante, setNomeRestaurante] = useState('')\n\n  const aoSubmeterForm = (evento: React.FormEvent<HTMLFormElement>) => {\n    evento.preventDefault() // não tenha comportamento de recarregar a pagina\n\n    if (parametros.id) {\n      http.put(`restaurantes/${parametros.id}/`, {\n        nome: nomeRestaurante\n      })\n        .then(() => {\n          alert(\"Restaurante atualizado com sucesso!\")\n        })\n    } else {\n      http.post('restaurantes/', {\n        nome: nomeRestaurante\n      })\n        .then(() => {\n          alert(\"Restaurante cadastrado com sucesso!\")\n        })\n    }\n\n  }\n\n\n  return (\n    <>\n    <AppBar>\n      \n    </AppBar>\n      <Box sx={{ display: 'flex', flexDirection: \"column\", alignItems: \"center\" }}>\n        <Typography component=\"h1\" variant=\"h6\"> Formulario de restaurantes </Typography>\n        <Box component=\"form\" onSubmit={aoSubmeterForm}>\n          <TextField\n            value={nomeRestaurante}\n            onChange={evento => setNomeRestaurante(evento.target.value)}\n            id=\"standard-basic\"\n            label=\"Nome do Restaurante\"\n            variant=\"standard\"\n            fullWidth\n            required\n          />\n          <Button sx={{ marginTop: 1 }} type=\"submit\" fullWidth variant=\"outlined\">Salvar</Button>\n        </Box>\n      </Box>\n    </>\n  )\n}\n\nexport default FormularioRestaurante"]},"metadata":{},"sourceType":"module"}